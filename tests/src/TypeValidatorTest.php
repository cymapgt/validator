<?php
namespace cymapgt\core\utility\validator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-01 at 12:57:37.
 */
class TypeValidatorTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var TypeValidator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers cymapgt\core\utility\validator\TypeValidator::varNull
     */
    public function testVarNull() {
        //test that nullable can be passed
        $testVal = '%rhossis83!';
        $this->assertInternalType('bool', TypeValidator::varNull($testVal));
        $this->assertEquals(true, TypeValidator::varNull($testVal));
        
        $testValNull = null;
        //test that string can be passed along with additional paramters
        $this->assertInternalType('bool', TypeValidator::varNull($testValNull));
        $this->assertEquals(true, TypeValidator::varNull($testValNull));
    }

    /**
     * @covers cymapgt\core\utility\validator\TypeValidator::varNotNull
     */
    public function testVarNotNull() {
        //test that var can be passed
        $testVal = '%rhossis83!';
        $this->assertInternalType('bool', TypeValidator::varNotNull($testVal));
        $this->assertEquals(true, TypeValidator::varNotNull($testVal));
        
        //test that null cannot be passed
        $testValNull = null;        
        $this->assertInternalType('array', TypeValidator::varNotNull($testValNull));
        $expectedErrors = TypeValidator::varNotNull($testValNull);
        $this->assertEquals(true, isset($expectedErrors['notEmpty']));
        
        //test var can be validated with additional options (params)
        $paramOptions = array (
            'alphaonly' => true,
            'length' => array (
                'min' => 0, 
                'max' => 20,
                'inclusive' => true
            )
        );

        $this->assertInternalType('array', TypeValidator::varNotNull($testVal, $paramOptions));
        $expectedErrorsWithParam1 = TypeValidator::varNotNull($testVal,$paramOptions);
        $this->assertEquals(true, isset($expectedErrorsWithParam1['alpha']));
    }

    /**
     * @covers cymapgt\core\utility\validator\TypeValidator::strNull
     */
    public function testStrNull() {
        //test that nullable can be passed
        $testVal = '%rhossis83!';
        $this->assertInternalType('bool', TypeValidator::strNull($testVal));
        $this->assertEquals(true, TypeValidator::strNull($testVal));
        
        $testValNull = '';
        //test that string can be passed along with additional paramters
        $this->assertInternalType('bool', TypeValidator::strNull($testValNull));
        $this->assertEquals(true, TypeValidator::strNull($testValNull));
    }

    /**
     * @covers cymapgt\core\utility\validator\TypeValidator::strNotNull
     */
    public function testStrNotNull() {
        //test that string can be passed
        $testVal = '%rhossis83!';
        $this->assertInternalType('bool', TypeValidator::strNotNull($testVal));
        $this->assertEquals(true, TypeValidator::strNotNull($testVal));
        
        $testValNull = '';
        //test that null cannot be passed
        $this->assertInternalType('array', TypeValidator::strNotNull($testValNull));
        $expectedErrors = TypeValidator::strNotNull($testValNull);
        $this->assertEquals(true, isset($expectedErrors['notEmpty']));
    }

    /**
     * @covers cymapgt\core\utility\validator\TypeValidator::intNull
     */
    public function testIntNull() {
        //test that nullable can be passed
        $testVal = 1000;
        $this->assertInternalType('bool', TypeValidator::intNull($testVal));
        $this->assertEquals(true, TypeValidator::intNull($testVal));
        
        $testValNull = 0;
        //test that int can be passed along with additional paramters
        $this->assertInternalType('bool', TypeValidator::intNull($testValNull));
        $this->assertEquals(true, TypeValidator::intNull($testValNull));
    }

    /**
     * @covers cymapgt\core\utility\validator\TypeValidator::intNotNull
     */
    public function testIntNotNull() {
        //test that string can be passed
        $testVal = 1000;
        $this->assertInternalType('bool', TypeValidator::intNotNull($testVal));
        $this->assertEquals(true, TypeValidator::intNotNull($testVal));
        
        $testValNull = 0;
        //test that null cannot be passed
        $this->assertInternalType('array', TypeValidator::intNotNull($testValNull));
        $expectedErrors = TypeValidator::intNotNull($testValNull);
        $this->assertEquals(true, isset($expectedErrors['notEmpty']));
    }

    /**
     * @covers cymapgt\core\utility\validator\TypeValidator::decimalNull
     */
    public function testDecimalNull() {
        //test that nullable can be passed
        $testVal = 1000.0;
        $this->assertInternalType('bool', TypeValidator::decimalNull($testVal));
        $this->assertEquals(true, TypeValidator::decimalNull($testVal));
        
        $testValNull = 0.0;
        //test that int can be passed along with additional paramters
        $this->assertInternalType('bool', TypeValidator::decimalNull($testValNull));
        $this->assertEquals(true, TypeValidator::decimalNull($testValNull));
    }

    /**
     * @covers cymapgt\core\utility\validator\TypeValidator::decimalNotNull
     */
    public function testDecimalNotNull() {
        //test that string can be passed
        $testVal = 1000.0;
        $this->assertInternalType('bool', TypeValidator::decimalNotNull($testVal));
        $this->assertEquals(true, TypeValidator::decimalNotNull($testVal));
        
        $testValNull = 0.0;
        //test that null cannot be passed
        $this->assertInternalType('array', TypeValidator::decimalNotNull($testValNull));
        $expectedErrors = TypeValidator::decimalNotNull($testValNull);
        $this->assertEquals(true, isset($expectedErrors['notEmpty']));
    }

    /**
     * @covers cymapgt\core\utility\validator\TypeValidator::datetimeNotNull
     */
    public function testDatetimeNotNull() {
        //test that nullable can be passed
        $testVal = new \DateTime();
        $this->assertInternalType('bool', TypeValidator::datetimeNotNull($testVal));
        $this->assertEquals(true, TypeValidator::datetimeNotNull($testVal));
        
        $testValNull = "2015-09-30 14:00:00";
        //test that int can be passed along with additional paramters
        $this->assertInternalType('bool', TypeValidator::datetimeNotNull($testValNull));
        $this->assertEquals(true, TypeValidator::datetimeNotNull($testValNull));
    }

    /**
     * @covers cymapgt\core\utility\validator\TypeValidator::listItemNotNull
     */
    public function testListItemNotNull() {
        //test list item validation as json
        $jsonString = '{
            "id": 1,
            "name": "Foo",
            "price": 123,
            "tags": [
              "Bar",
              "Eek"
            ],
            "stock": {
              "warehouse": 300,
              "retail": 20
            }
        }';
        
        $testValJson = $jsonString;
        $this->assertInternalType('bool', TypeValidator::listItemNotNull($testValJson));
        $this->assertEquals(true, TypeValidator::listItemNotNull($testValJson));

        //test rejection of a broken json string
        $jsonStringBroken = '
            "id": 1,
            "name": "Foo",
            "price": 123,
            "tags": [
              "Bar",
              "Eek"
            ],
            "stock": {
              "warehouse": 300,
              "retail": 20
            }
        }';
        
        $testValJsonBroken = $jsonStringBroken;
        $this->assertInternalType('array', TypeValidator::listItemNotNull($testValJsonBroken));
        $expectedErrorsJsonBroken = TypeValidator::listItemNotNull($testValJsonBroken);
        
        $this->assertEquals(true, isset($expectedErrorsJsonBroken['json']));
        
        //test that empty list can be passed
        $arrayString = array (
            'id' => 1,
            'name' => 'Foo',
            'price' => 123,
            'tags' => array (
                'bar',
                'Eek'
            ),
            'stock' => array (
                'warehouse' => 300,
                'retail' => 20
            )
        );
        
        $testVal = $arrayString;
        $this->assertInternalType('bool', TypeValidator::listItemNotNull($testVal));
        $this->assertEquals(true, TypeValidator::listItemNotNull($testVal));                
    }

    /**
     * @covers cymapgt\core\utility\validator\TypeValidator::bool
     */
    public function testBool() {
        //test bool validation
        $testValTrue = true;
        $this->assertInternalType('bool', TypeValidator::bool($testValTrue));
        $this->assertEquals(true, TypeValidator::bool($testValTrue));
        
        //test bool validation
        $testValFalse = false;
        $this->assertInternalType('bool', TypeValidator::bool($testValFalse));
        $this->assertEquals(true, TypeValidator::bool($testValFalse));     
        
        
        //test bool validation
        $testValOne = 1;
        $expectedErrorsOne = TypeValidator::bool($testValOne);        
        $this->assertInternalType('array', TypeValidator::bool($testValOne));
        $this->assertEquals(true, isset($expectedErrorsOne['bool']));  
        
        //test bool validation
        $testValZero = 0;
        $expectedErrorsZero = TypeValidator::bool($testValZero);        
        $this->assertInternalType('array', TypeValidator::bool($testValZero));
        $this->assertEquals(true, isset($expectedErrorsZero['bool']));
    }
}
