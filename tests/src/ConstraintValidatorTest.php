<?php

namespace cymapgt\core\utility\validator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-05 at 18:56:40.
 */
class ConstraintValidatorTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ConstraintValidator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers cymapgt\core\utility\validator\ConstraintValidator::constraints
     */
    public function testNumberConstraints() {
        $valTest = 11;
        
        $constraintBetween = array (
            'between' => array (
                'start' => 1,
                'end' => 20,
                'inclusive' => false
            )
        );
        
        $this->assertEquals(true, ConstraintValidator::constraints($valTest, $constraintBetween));
        
        $constraintEquals = array (
            'equals' => array (
                'value' => 11,
                'identical' => true
            )
        );
        
        $this->assertEquals(true, ConstraintValidator::constraints($valTest, $constraintEquals));
        
        $constraintMin = array (
            'min' => array (
                'value' => 11,
                'inclusive' => true
            )
        );
        
        $this->assertEquals(true, ConstraintValidator::constraints($valTest, $constraintMin));
        
        $constraintMinNotInclusive = array (
            'min' => array (
                'value' => 11,
                'inclusive' => false
            )
        );
        
        $expectedMinError = ConstraintValidator::constraints($valTest, $constraintMinNotInclusive);
        
        $this->assertInternalType('array', $expectedMinError);
        $this->assertEquals(true, isset($expectedMinError['min']));
        
        $constraintMax = array (
            'min' => array (
                'value' => 11,
                'inclusive' => true
            )
        );
        
        $this->assertEquals(true, ConstraintValidator::constraints($valTest, $constraintMax));
        
        $constraintMaxNotInclusive = array (
            'max' => array (
                'value' => 11,
                'inclusive' => false
            )
        );
        
        $expectedMaxError = ConstraintValidator::constraints($valTest, $constraintMaxNotInclusive);
        
        $this->assertInternalType('array', $expectedMaxError);
        $this->assertEquals(true, isset($expectedMaxError['max']));
    }
    
    /**
     * @covers cymapgt\core\utility\validator\ConstraintValidator::constraints
     */
    public function testDateConstraints() {
        $valTest = new \DateTime('2015-10-05 00:00:00');
        
        $constraintBetween = array (
            'between' => array (
                'start' => new \DateTime('2015-10-04 00:00:00'),
                'end' => new \DateTime('2015-10-06 00:00:00'),
                'inclusive' => false
            )
        );
        
        $this->assertEquals(true, ConstraintValidator::constraints($valTest, $constraintBetween));
        
        $constraintEquals = array (
            'equals' => array (
                'value' => new \DateTime('2015-10-05 00:00:00'),
                'identical' => false                            //not going to work with Datetime Obj because it is not a clone
            )
        );
        
        $this->assertEquals(true, ConstraintValidator::constraints($valTest, $constraintEquals));
        
        $constraintMin = array (
            'min' => array (
                'value' => new \DateTime('2015-10-05 00:00:00'),
                'inclusive' => true
            )
        );
        
        $this->assertEquals(true, ConstraintValidator::constraints($valTest, $constraintMin));
        
        $constraintMinNotInclusive = array (
            'min' => array (
                'value' => new \DateTime('2015-10-05 00:00:00'),
                'inclusive' => false
            )
        );
        
        $expectedMinError = ConstraintValidator::constraints($valTest, $constraintMinNotInclusive);
        
        $this->assertInternalType('array', $expectedMinError);
        $this->assertEquals(true, isset($expectedMinError['min']));
        
        $constraintMax = array (
            'min' => array (
                'value' => new \DateTime('2015-10-05 00:00:00'),
                'inclusive' => true
            )
        );
        
        $this->assertEquals(true, ConstraintValidator::constraints($valTest, $constraintMax));
        
        $constraintMaxNotInclusive = array (
            'max' => array (
                'value' => new \DateTime('2015-10-05 00:00:00'),
                'inclusive' => false
            )
        );
        
        $expectedMaxError = ConstraintValidator::constraints($valTest, $constraintMaxNotInclusive);
        
        $this->assertInternalType('array', $expectedMaxError);
        $this->assertEquals(true, isset($expectedMaxError['max']));
    }    
}
